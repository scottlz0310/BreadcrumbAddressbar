name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Qt dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libegl1 libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[ci]"
        pip install pytest pytest-cov coverage bandit safety
        # pytest-covの確認
        python -c "import pytest_cov; print('pytest-cov version:', pytest_cov.__version__)"
    
    - name: Check pytest plugins
      run: |
        # pytest-qtプラグインを無効化してヘルプを表示
        PYTEST_DISABLE_PLUGIN_AUTOLOAD=pytestqt pytest --help
        echo "=== pytest-cov plugin check ==="
        PYTEST_DISABLE_PLUGIN_AUTOLOAD=pytestqt pytest --help | grep -i cov || echo "pytest-cov not found in help"
        echo "=== installed packages ==="
        pip list | grep -E "(pytest|cov)"
        echo "=== pytest plugins ==="
        PYTEST_DISABLE_PLUGIN_AUTOLOAD=pytestqt pytest --version
      env:
        QT_QPA_PLATFORM: offscreen
        DISPLAY: :99
      
    - name: Run tests with coverage
      run: |
        # pytest-qtプラグインを無効化してテスト実行
        echo "=== Testing with pytest-cov ==="
        PYTEST_DISABLE_PLUGIN_AUTOLOAD=pytestqt pytest --cov=breadcrumb_addressbar --cov-report=xml --cov-report=term-missing -m "not qt" || {
          echo "pytest-cov failed, trying alternative approach..."
          # 代替手段: coverageコマンドを直接使用
          coverage run --source=breadcrumb_addressbar -m pytest tests/ -m "not qt"
          coverage xml
          coverage report --show-missing
        }
      env:
        QT_QPA_PLATFORM: offscreen
        DISPLAY: :99
        PYTEST_DISABLE_PLUGIN_AUTOLOAD: "pytestqt"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install bandit safety
    
    - name: Run black
      run: |
        black --check breadcrumb_addressbar/ tests/ breadcrumb_addressbar/examples/ --line-length 79
    
    - name: Run isort
      run: |
        isort --check-only breadcrumb_addressbar/ tests/ breadcrumb_addressbar/examples/
    
    - name: Run flake8
      run: |
        flake8 breadcrumb_addressbar/ tests/ breadcrumb_addressbar/examples/ --max-line-length=79 --extend-ignore=E203,W503
    
    - name: Run mypy
      run: |
        mypy breadcrumb_addressbar/ --ignore-missing-imports
    
    - name: Run bandit security check
      run: |
        bandit -r breadcrumb_addressbar/ -f json -o bandit-report.json || true
        bandit -r breadcrumb_addressbar/ -f txt
    
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  quality-gate:
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run comprehensive quality checks
      run: |
        echo "=== コード品質チェック完了 ==="
        echo "✅ テスト: 全テストが成功"
        echo "✅ リント: black, isort, flake8, mypy が成功"
        echo "✅ ビルド: パッケージビルドが成功"
        echo "✅ セキュリティ: bandit, safety チェック完了"
        echo ""
        echo "🎉 全ての品質チェックが完了しました！" 